# dependencies
library(dplyr); library(magrittr); library(tibble)
library(sf); library(ggplot2); library(tidyr); library(rstudioapi)
library(mgcv); library(gratia); library(lme4)
library(terra) # only required for solutions
# automatically set file path
# (or if this doesn't work,
# manually set your working directory to the folder "9_AItoEcologicalModels")
PATH = dirname(rstudioapi::getSourceEditorContext()$path)
setwd(PATH)
# read in required data (n=178 camera traps)
# create an SF object with the location geometry and site-level covariates
locs = read.csv("./data/kenya/survey/bh_camera_locations.csv") %>%
sf::st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326) %>%
sf::st_transform(locs, crs = "+proj=utm +zone=36 +south +datum=WGS84 +units=m +no_defs") %>%
dplyr::filter(CT_site != "MT34")
locs
head(locs)
# add coordinates columns for XY locations
locs = cbind(locs, sf::st_coordinates(locs))
# covariates for each camera trap
covars = read.csv("./data/kenya/data_processed/bh_site_covariates_spatial.csv") %>%
dplyr::select(-Conservancy, -X, -Y)
# combine and only keep locations where camera sampled for > 0 days (n=175)
locs = locs %>%
dplyr::left_join(covars) %>%
dplyr::filter(n_days_sampled > 0)
head(locs)
# create a longitudinal dataframe of conservancy vs each covariate
locs_longdf = locs %>%
sf::st_drop_geometry() %>%
tidyr::pivot_longer(cols = c("closed_lc", "agri_lc",
"distance_to_water", "popdens_log", "livestock_pressure"),
names_to="covariate", values_to="value")
# boxplots of covariates across each conservancy - what do you notice?
ggplot(locs_longdf) +
geom_boxplot(aes(factor(Conservancy), value, group=Conservancy, fill=Conservancy)) +
theme_minimal() +
facet_wrap(~covariate, scales="free_y") +
# sets the x-axis text to print at an angle and not overlapping the plot
theme(axis.text.x = element_text(angle = 45, hjust = 0.8))
# map livestock pressure across the study area
# change this to look at other covariates!
locs %>%
ggplot() +
geom_sf(aes(size=livestock_pressure, color=livestock_pressure)) +
theme_classic() +
scale_color_viridis_c(end=0.9, name="Livestock\npressure") +
scale_size(guide="none")
# specify our species of interest
spp = "hare"
# number of days with hares observed per camera trap
ctd = read.csv("./data/kenya/survey/bh_camera_images_mara.csv") %>%
dplyr::filter(CT_site %in% locs$CT_site) %>%
dplyr::mutate(Date = as.Date(Date, format="%Y-%m-%d")) %>%
dplyr::filter(Species == spp) %>%
dplyr::group_by(CT_site) %>%
dplyr::summarise(n_days_detected = n_distinct(Date))
# add to "locs" and replace autofill NAs
locs = locs %>%
dplyr::left_join(ctd) %>%
dplyr::mutate(n_days_detected = replace(n_days_detected, is.na(n_days_detected), 0))
# calculate proportion detected and ensure ranges between 0 and 1
locs$prop_detected = locs$n_days_detected / locs$n_days_sampled
range(locs$prop_detected)
# quick viz
ggplot(locs) +
geom_sf(aes(size=prop_detected, color=prop_detected), alpha=0.8) +
theme_classic() +
scale_color_viridis_c(name="Hare\noccupancy\n(proportion\nsampled\ndays)") +
scale_size(guide="none")
scale_size(guide="none")
head(locs)
locs %>%
ggplot() +
geom_point(aes(livestock_pressure, prop_detected))
head(locs)
# scale linear covariates for comparability and save as new variables "_s"
# (denoting scaled)
locs$closed_lc_s = scale(locs$closed_lc)
locs$livestock_pressure_s = scale(locs$livestock_pressure)
locs$distance_to_water_s = scale(locs$distance_to_water)
# logistic regression model with livestock and conservancy
# response is the proportion detections
# "weights" argument provides the model with number of trials
m1 = glm(prop_detected ~ livestock_pressure_s + Conservancy,
family=binomial(link="logit"),
weights = n_days_sampled,
data=locs)
# summary information
summary(m1)
# using mgcv's gam function to fit a linear model
# (parameter estimates are almost the same as the glm)
m4 = mgcv::gam(prop_detected ~ Conservancy + livestock_pressure_s,
data = locs,
family = binomial(link="logit"),
weights = n_days_sampled,
method = "REML")
# adding a nonlinear function of livestock occ using s()
m5 = mgcv::gam(prop_detected ~ Conservancy + s(livestock_pressure),
data = locs,
family = binomial(link="logit"),
weights = n_days_sampled,
method = "REML")
summary(m4)
summary(m5)
# using mgcv's gam function to fit a linear model
# (parameter estimates are almost the same as the glm)
m4 = mgcv::gam(prop_detected ~ Conservancy + livestock_pressure_s,
data = locs,
family = binomial(link="logit"),
weights = n_days_sampled,
method = "REML")
summary(m4)
# adding a nonlinear function of livestock occ using s()
m5 = mgcv::gam(prop_detected ~ Conservancy + s(livestock_pressure),
data = locs,
family = binomial(link="logit"),
weights = n_days_sampled,
method = "REML")
summary(m5)
gratia::draw(m5) + theme_minimal() + geom_hline(yintercept=0, lty=2, alpha=0.5)
summary(m4)
summary(m5)
AIC(m4)
AIC(m5)
# extract residuals
resid = locs %>%
dplyr::mutate(resid = resid(m5, "deviance"))
# map residuals with diverging colour scale and size to absolute magnitude
resid %>%
ggplot() +
geom_sf(aes(color=resid, size=abs(resid))) +
scale_color_gradient2() +
theme_classic() +
ggtitle("m5 residuals")
m6 = mgcv::gam(prop_detected ~ 1 +
s(X, Y, bs="gp", m=c(3, 3000)), # matern w/ kappa=1.5 and range=3000m
data = locs,
family = binomial(link="logit"),
weights = n_days_sampled,
method = "REML")
plotGPSmooth = function(model, plot.title="Gaussian process smooth"){
# grid locations to predict to with XY coordinates
# (based on creating a template raster of the area)
new_dat = read.csv("./data/kenya/environment/habitat/template_raster_cells.csv")
# predict to raster locations
new_dat$gp_pred = predict.gam(object = model,
newdata = new_dat,
type = "terms",
terms = "s(X,Y)",
se.fit = F)
# plot spatial field and overlay observations
sp_plot = new_dat %>%
ggplot() +
geom_raster(aes(X, Y, fill=gp_pred)) +
scale_fill_viridis_c(option="magma", name="Partial\neffect") +
geom_sf(data=locs, aes(size=prop_detected), pch=16, alpha=0.3) +
theme_classic() +
ggtitle(plot.title) +
theme(plot.title = element_text(size=13, hjust=0.5)) +
scale_size(guide="none")
return(sp_plot)
}
plotGPSmooth(m6)
# fit the model
m7 = mgcv::gam(prop_detected ~ 1 +
s(X, Y, bs="gp", m=c(3, 3000)) +
s(livestock_pressure),
data = locs,
family = binomial(link="logit"),
weights = n_days_sampled,
method = "REML")
# plot the fitted function
gratia::draw(m7, select="s(livestock_pressure)") + xlab("Livestock pressure") +
geom_hline(yintercept=0, lty=2, alpha=0.5) + theme_minimal()
m6 = mgcv::gam(prop_detected ~ 1 +
s(X, Y, bs="gp", m=c(3, 200)), # matern w/ kappa=1.5 and range=3000m
data = locs,
family = binomial(link="logit"),
weights = n_days_sampled,
method = "REML")
plotGPSmooth = function(model, plot.title="Gaussian process smooth"){
# grid locations to predict to with XY coordinates
# (based on creating a template raster of the area)
new_dat = read.csv("./data/kenya/environment/habitat/template_raster_cells.csv")
# predict to raster locations
new_dat$gp_pred = predict.gam(object = model,
newdata = new_dat,
type = "terms",
terms = "s(X,Y)",
se.fit = F)
# plot spatial field and overlay observations
sp_plot = new_dat %>%
ggplot() +
geom_raster(aes(X, Y, fill=gp_pred)) +
scale_fill_viridis_c(option="magma", name="Partial\neffect") +
geom_sf(data=locs, aes(size=prop_detected), pch=16, alpha=0.3) +
theme_classic() +
ggtitle(plot.title) +
theme(plot.title = element_text(size=13, hjust=0.5)) +
scale_size(guide="none")
return(sp_plot)
}
plotGPSmooth(m6)
m6 = mgcv::gam(prop_detected ~ 1 +
s(X, Y, bs="gp", m=c(3, 3000)), # matern w/ kappa=1.5 and range=3000m
data = locs,
family = binomial(link="logit"),
weights = n_days_sampled,
method = "REML")
m6 = mgcv::gam(prop_detected ~ 1 +
s(X, Y, bs="gp", m=c(3, 3000)), # matern w/ kappa=1.5 and range=3000m
data = locs,
family = binomial(link="logit"),
weights = n_days_sampled,
method = "REML")
m6 = mgcv::gam(prop_detected ~ 1 +
s(X, Y, bs="gp", m=c(3, 3000)), # matern w/ kappa=1.5 and range=3000m
data = locs,
family = binomial(link="logit"),
weights = n_days_sampled,
method = "REML")
summary(m6)
new_dat = read.csv("./data/kenya/environment/habitat/template_raster_cells.csv")
head(new_dat)
# predict to raster locations
new_dat$gp_pred = predict.gam(object = model,
newdata = new_dat,
type = "terms",
terms = "s(X,Y)",
se.fit = F)
model = m6
# predict to raster locations
new_dat$gp_pred = predict.gam(object = model,
newdata = new_dat,
type = "terms",
terms = "s(X,Y)",
se.fit = F)
head(new_dat)
# plot spatial field and overlay observations
sp_plot = new_dat %>%
ggplot() +
geom_raster(aes(X, Y, fill=gp_pred)) +
scale_fill_viridis_c(option="magma", name="Partial\neffect") +
geom_sf(data=locs, aes(size=prop_detected), pch=16, alpha=0.3) +
theme_classic() +
ggtitle(plot.title) +
theme(plot.title = element_text(size=13, hjust=0.5)) +
scale_size(guide="none")
plotGPSmooth = function(model, plot.title="Gaussian process smooth"){
# grid locations to predict to with XY coordinates
# (based on creating a template raster of the area)
new_dat = read.csv("./data/kenya/environment/habitat/template_raster_cells.csv")
# predict to raster locations
new_dat$gp_pred = predict.gam(object = model,
newdata = new_dat,
type = "terms",
terms = "s(X,Y)",
se.fit = F)
# plot spatial field and overlay observations
sp_plot = new_dat %>%
ggplot() +
geom_raster(aes(X, Y, fill=gp_pred)) +
scale_fill_viridis_c(option="magma", name="Partial\neffect") +
geom_sf(data=locs, aes(size=prop_detected), pch=16, alpha=0.3) +
theme_classic() +
ggtitle(plot.title) +
theme(plot.title = element_text(size=13, hjust=0.5)) +
scale_size(guide="none")
return(sp_plot)
}
plotGPSmooth(m6)
m6 = mgcv::gam(prop_detected ~ 1 +
s(X, Y, bs="gp", m=c(3, 500)), # matern w/ kappa=1.5 and range=3000m
data = locs,
family = binomial(link="logit"),
weights = n_days_sampled,
method = "REML")
plotGPSmooth(m6)
m6 = mgcv::gam(prop_detected ~ 1 +
s(X, Y, bs="gp", m=c(3, 200)), # matern w/ kappa=1.5 and range=3000m
data = locs,
family = binomial(link="logit"),
weights = n_days_sampled,
method = "REML")
plotGPSmooth(m6)
m6 = mgcv::gam(prop_detected ~ 1 +
s(X, Y, bs="gp", m=c(3, 3000)), # matern w/ kappa=1.5 and range=3000m
data = locs,
family = binomial(link="logit"),
weights = n_days_sampled,
method = "REML")
plotGPSmooth = function(model, plot.title="Gaussian process smooth"){
# grid locations to predict to with XY coordinates
# (based on creating a template raster of the area)
new_dat = read.csv("./data/kenya/environment/habitat/template_raster_cells.csv")
# predict to raster locations
new_dat$gp_pred = predict.gam(object = model,
newdata = new_dat,
type = "terms",
terms = "s(X,Y)",
se.fit = F)
# plot spatial field and overlay observations
sp_plot = new_dat %>%
ggplot() +
geom_raster(aes(X, Y, fill=gp_pred)) +
scale_fill_viridis_c(option="magma", name="Partial\neffect") +
geom_sf(data=locs, aes(size=prop_detected), pch=16, alpha=0.3) +
theme_classic() +
ggtitle(plot.title) +
theme(plot.title = element_text(size=13, hjust=0.5)) +
scale_size(guide="none")
return(sp_plot)
}
plotGPSmooth(m6)
m6 = mgcv::gam(prop_detected ~ 1 +
s(X, Y, bs="gp", m=c(3, 6000)), # matern w/ kappa=1.5 and range=3000m
data = locs,
family = binomial(link="logit"),
weights = n_days_sampled,
method = "REML")
plotGPSmooth = function(model, plot.title="Gaussian process smooth"){
# grid locations to predict to with XY coordinates
# (based on creating a template raster of the area)
new_dat = read.csv("./data/kenya/environment/habitat/template_raster_cells.csv")
# predict to raster locations
new_dat$gp_pred = predict.gam(object = model,
newdata = new_dat,
type = "terms",
terms = "s(X,Y)",
se.fit = F)
# plot spatial field and overlay observations
sp_plot = new_dat %>%
ggplot() +
geom_raster(aes(X, Y, fill=gp_pred)) +
scale_fill_viridis_c(option="magma", name="Partial\neffect") +
geom_sf(data=locs, aes(size=prop_detected), pch=16, alpha=0.3) +
theme_classic() +
ggtitle(plot.title) +
theme(plot.title = element_text(size=13, hjust=0.5)) +
scale_size(guide="none")
return(sp_plot)
}
plotGPSmooth(m6)
m6 = mgcv::gam(prop_detected ~ 1 +
s(X, Y, bs="gp", m=c(3, 10000)), # matern w/ kappa=1.5 and range=3000m
data = locs,
family = binomial(link="logit"),
weights = n_days_sampled,
method = "REML")
plotGPSmooth = function(model, plot.title="Gaussian process smooth"){
# grid locations to predict to with XY coordinates
# (based on creating a template raster of the area)
new_dat = read.csv("./data/kenya/environment/habitat/template_raster_cells.csv")
# predict to raster locations
new_dat$gp_pred = predict.gam(object = model,
newdata = new_dat,
type = "terms",
terms = "s(X,Y)",
se.fit = F)
# plot spatial field and overlay observations
sp_plot = new_dat %>%
ggplot() +
geom_raster(aes(X, Y, fill=gp_pred)) +
scale_fill_viridis_c(option="magma", name="Partial\neffect") +
geom_sf(data=locs, aes(size=prop_detected), pch=16, alpha=0.3) +
theme_classic() +
ggtitle(plot.title) +
theme(plot.title = element_text(size=13, hjust=0.5)) +
scale_size(guide="none")
return(sp_plot)
}
plotGPSmooth(m6)
m6 = mgcv::gam(prop_detected ~ 1 +
s(X, Y, bs="gp", m=c(3, 30000)), # matern w/ kappa=1.5 and range=3000m
data = locs,
family = binomial(link="logit"),
weights = n_days_sampled,
method = "REML")
plotGPSmooth = function(model, plot.title="Gaussian process smooth"){
# grid locations to predict to with XY coordinates
# (based on creating a template raster of the area)
new_dat = read.csv("./data/kenya/environment/habitat/template_raster_cells.csv")
# predict to raster locations
new_dat$gp_pred = predict.gam(object = model,
newdata = new_dat,
type = "terms",
terms = "s(X,Y)",
se.fit = F)
# plot spatial field and overlay observations
sp_plot = new_dat %>%
ggplot() +
geom_raster(aes(X, Y, fill=gp_pred)) +
scale_fill_viridis_c(option="magma", name="Partial\neffect") +
geom_sf(data=locs, aes(size=prop_detected), pch=16, alpha=0.3) +
theme_classic() +
ggtitle(plot.title) +
theme(plot.title = element_text(size=13, hjust=0.5)) +
scale_size(guide="none")
return(sp_plot)
}
plotGPSmooth(m6)
m6 = mgcv::gam(prop_detected ~ 1 +
s(X, Y, bs="gp", m=c(3, 50000)), # matern w/ kappa=1.5 and range=3000m
data = locs,
family = binomial(link="logit"),
weights = n_days_sampled,
method = "REML")
plotGPSmooth = function(model, plot.title="Gaussian process smooth"){
# grid locations to predict to with XY coordinates
# (based on creating a template raster of the area)
new_dat = read.csv("./data/kenya/environment/habitat/template_raster_cells.csv")
# predict to raster locations
new_dat$gp_pred = predict.gam(object = model,
newdata = new_dat,
type = "terms",
terms = "s(X,Y)",
se.fit = F)
# plot spatial field and overlay observations
sp_plot = new_dat %>%
ggplot() +
geom_raster(aes(X, Y, fill=gp_pred)) +
scale_fill_viridis_c(option="magma", name="Partial\neffect") +
geom_sf(data=locs, aes(size=prop_detected), pch=16, alpha=0.3) +
theme_classic() +
ggtitle(plot.title) +
theme(plot.title = element_text(size=13, hjust=0.5)) +
scale_size(guide="none")
return(sp_plot)
}
plotGPSmooth(m6)
